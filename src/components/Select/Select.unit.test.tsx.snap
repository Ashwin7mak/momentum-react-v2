// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Select snapshot should match snapshot 1`] = `
<Select
  label="Label"
>
  <div
    className="md-select-wrapper"
  >
    <label
      id="react-aria-8945734701-3"
      onClick={[Function]}
    >
      Label
    </label>
    <HiddenSelect
      label="Label"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="react-aria-8945734701-3 react-aria-8945734701-4"
            class="md-select-dropdown-input"
            id="react-aria-8945734701-2"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="react-aria-8945734701-4"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  fill="currentColor"
                  height="100%"
                  stroke="currentColor"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          Label
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <button
      aria-controls={null}
      aria-expanded={false}
      aria-haspopup="listbox"
      aria-labelledby="react-aria-8945734701-3 react-aria-8945734701-4"
      className="md-select-dropdown-input"
      id="react-aria-8945734701-2"
      onBlur={[Function]}
      onClick={[Function]}
      onDragStart={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      type="button"
    >
      <span
        className="md-select-selected-item-wrapper"
        id="react-aria-8945734701-4"
      />
      <span
        aria-hidden="true"
        className="md-select-icon-wrapper"
      >
        <Icon
          name="arrow-down"
          scale={16}
          weight="bold"
        >
          <div
            className="md-icon-wrapper"
          >
            <svg
              className=""
              data-autoscale={false}
              data-scale={16}
              fill="currentColor"
              height="100%"
              stroke="currentColor"
              style={Object {}}
              viewBox="0, 0, 32, 32"
              width="100%"
            />
          </div>
        </Icon>
      </span>
    </button>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with className 1`] = `
<Select
  className="example-class"
  label="Label"
>
  <div
    className="example-class md-select-wrapper"
  >
    <label
      id="react-aria-8945734701-7"
      onClick={[Function]}
    >
      Label
    </label>
    <HiddenSelect
      label="Label"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="react-aria-8945734701-7 react-aria-8945734701-8"
            class="md-select-dropdown-input"
            id="react-aria-8945734701-6"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="react-aria-8945734701-8"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  fill="currentColor"
                  height="100%"
                  stroke="currentColor"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          Label
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <button
      aria-controls={null}
      aria-expanded={false}
      aria-haspopup="listbox"
      aria-labelledby="react-aria-8945734701-7 react-aria-8945734701-8"
      className="md-select-dropdown-input"
      id="react-aria-8945734701-6"
      onBlur={[Function]}
      onClick={[Function]}
      onDragStart={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      type="button"
    >
      <span
        className="md-select-selected-item-wrapper"
        id="react-aria-8945734701-8"
      />
      <span
        aria-hidden="true"
        className="md-select-icon-wrapper"
      >
        <Icon
          name="arrow-down"
          scale={16}
          weight="bold"
        >
          <div
            className="md-icon-wrapper"
          >
            <svg
              className=""
              data-autoscale={false}
              data-scale={16}
              fill="currentColor"
              height="100%"
              stroke="currentColor"
              style={Object {}}
              viewBox="0, 0, 32, 32"
              width="100%"
            />
          </div>
        </Icon>
      </span>
    </button>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with direction 1`] = `
<Select
  direction="top"
  label="Label"
>
  <div
    className="md-select-wrapper"
  >
    <label
      id="react-aria-8945734701-22"
      onClick={[Function]}
    >
      Label
    </label>
    <HiddenSelect
      label="Label"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="react-aria-8945734701-22 react-aria-8945734701-23"
            class="md-select-dropdown-input"
            id="react-aria-8945734701-21"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="react-aria-8945734701-23"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  fill="currentColor"
                  height="100%"
                  stroke="currentColor"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          Label
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <button
      aria-controls={null}
      aria-expanded={false}
      aria-haspopup="listbox"
      aria-labelledby="react-aria-8945734701-22 react-aria-8945734701-23"
      className="md-select-dropdown-input"
      id="react-aria-8945734701-21"
      onBlur={[Function]}
      onClick={[Function]}
      onDragStart={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      type="button"
    >
      <span
        className="md-select-selected-item-wrapper"
        id="react-aria-8945734701-23"
      />
      <span
        aria-hidden="true"
        className="md-select-icon-wrapper"
      >
        <Icon
          name="arrow-up"
          scale={16}
          weight="bold"
        >
          <div
            className="md-icon-wrapper"
          >
            <svg
              className=""
              data-autoscale={false}
              data-scale={16}
              fill="currentColor"
              height="100%"
              stroke="currentColor"
              style={Object {}}
              viewBox="0, 0, 32, 32"
              width="100%"
            />
          </div>
        </Icon>
      </span>
    </button>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with id 1`] = `
<Select
  id="example-id"
  label="Label"
>
  <div
    className="md-select-wrapper"
    id="example-id"
  >
    <label
      id="react-aria-8945734701-10"
      onClick={[Function]}
    >
      Label
    </label>
    <HiddenSelect
      label="Label"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="react-aria-8945734701-10 react-aria-8945734701-11"
            class="md-select-dropdown-input"
            id="example-id"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="react-aria-8945734701-11"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  fill="currentColor"
                  height="100%"
                  stroke="currentColor"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          Label
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <button
      aria-controls={null}
      aria-expanded={false}
      aria-haspopup="listbox"
      aria-labelledby="react-aria-8945734701-10 react-aria-8945734701-11"
      className="md-select-dropdown-input"
      id="example-id"
      onBlur={[Function]}
      onClick={[Function]}
      onDragStart={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      type="button"
    >
      <span
        className="md-select-selected-item-wrapper"
        id="react-aria-8945734701-11"
      />
      <span
        aria-hidden="true"
        className="md-select-icon-wrapper"
      >
        <Icon
          name="arrow-down"
          scale={16}
          weight="bold"
        >
          <div
            className="md-icon-wrapper"
          >
            <svg
              className=""
              data-autoscale={false}
              data-scale={16}
              fill="currentColor"
              height="100%"
              stroke="currentColor"
              style={Object {}}
              viewBox="0, 0, 32, 32"
              width="100%"
            />
          </div>
        </Icon>
      </span>
    </button>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with placeholder 1`] = `
<Select
  label="Label"
  placeholder="Select an option"
>
  <div
    className="md-select-wrapper"
  >
    <label
      id="react-aria-8945734701-18"
      onClick={[Function]}
    >
      Label
    </label>
    <HiddenSelect
      label="Label"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="react-aria-8945734701-18 react-aria-8945734701-19"
            class="md-select-dropdown-input"
            id="react-aria-8945734701-17"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="react-aria-8945734701-19"
            >
              Select an option
            </span>
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  fill="currentColor"
                  height="100%"
                  stroke="currentColor"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          Label
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <button
      aria-controls={null}
      aria-expanded={false}
      aria-haspopup="listbox"
      aria-labelledby="react-aria-8945734701-18 react-aria-8945734701-19"
      className="md-select-dropdown-input"
      id="react-aria-8945734701-17"
      onBlur={[Function]}
      onClick={[Function]}
      onDragStart={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      type="button"
    >
      <span
        className="md-select-selected-item-wrapper"
        id="react-aria-8945734701-19"
      >
        Select an option
      </span>
      <span
        aria-hidden="true"
        className="md-select-icon-wrapper"
      >
        <Icon
          name="arrow-down"
          scale={16}
          weight="bold"
        >
          <div
            className="md-icon-wrapper"
          >
            <svg
              className=""
              data-autoscale={false}
              data-scale={16}
              fill="currentColor"
              height="100%"
              stroke="currentColor"
              style={Object {}}
              viewBox="0, 0, 32, 32"
              width="100%"
            />
          </div>
        </Icon>
      </span>
    </button>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with style 1`] = `
<Select
  label="Label"
  style={
    Object {
      "color": "pink",
    }
  }
>
  <div
    className="md-select-wrapper"
    style={
      Object {
        "color": "pink",
      }
    }
  >
    <label
      id="react-aria-8945734701-14"
      onClick={[Function]}
    >
      Label
    </label>
    <HiddenSelect
      label="Label"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="react-aria-8945734701-14 react-aria-8945734701-15"
            class="md-select-dropdown-input"
            id="react-aria-8945734701-13"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="react-aria-8945734701-15"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  fill="currentColor"
                  height="100%"
                  stroke="currentColor"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          Label
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <button
      aria-controls={null}
      aria-expanded={false}
      aria-haspopup="listbox"
      aria-labelledby="react-aria-8945734701-14 react-aria-8945734701-15"
      className="md-select-dropdown-input"
      id="react-aria-8945734701-13"
      onBlur={[Function]}
      onClick={[Function]}
      onDragStart={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      type="button"
    >
      <span
        className="md-select-selected-item-wrapper"
        id="react-aria-8945734701-15"
      />
      <span
        aria-hidden="true"
        className="md-select-icon-wrapper"
      >
        <Icon
          name="arrow-down"
          scale={16}
          weight="bold"
        >
          <div
            className="md-icon-wrapper"
          >
            <svg
              className=""
              data-autoscale={false}
              data-scale={16}
              fill="currentColor"
              height="100%"
              stroke="currentColor"
              style={Object {}}
              viewBox="0, 0, 32, 32"
              width="100%"
            />
          </div>
        </Icon>
      </span>
    </button>
  </div>
</Select>
`;
